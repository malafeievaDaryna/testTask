namespace shaders {
const char vs_wall_shader[] =
    "cbuffer PerFaceConstants : register (b0)\n"
    "{\n"
    "	matrix MVP;\n"
    "	uint isWallDestroyed[4000]; // each entry contains 32 walls in packed way thus we have 100000 walls\n"
    "}\n"
    "struct VertexShaderOutput\n"
    "{\n"
    "	float4 position : SV_POSITION;\n"
    "	float2 uv : TEXCOORD;\n"
    "};\n"
    "VertexShaderOutput VS_main(\n"
    "	uint extrudVertID : EXTRUDVERTID,\n"
    "	float2 uv : TEXCOORD,\n"
    "   matrix instanceExtrudingVer : INSTANCEEXTRUDINGVERTS,\n"
    "	uint id: SV_InstanceID)\n"
    "{\n"
    "	VertexShaderOutput output;\n"
    "   uint visibility = isWallDestroyed[id / 32] >> (id % 32);\n"
    "   if (!visibility) {\n"
    "   float4 extruded = instanceExtrudingVer[extrudVertID];\n"
    "   output.position = mul(MVP, extruded);\n"
    "	output.uv = uv;\n"
    "	} else {\n"
    "	/*primitive discarding by degradating triangle with putting outside NDC */\n"
    "	output.position = float4(100, 100, 100, 1);\n"
    "	}\n"
    "	return output;\n"
    "}\n";
const char vs_bullet_shader[] =
    "cbuffer PerFaceConstants : register (b0)\n"
    "{\n"
    "	matrix MVP;\n"
    "}\n"
    "struct VertexShaderOutput\n"
    "{\n"
    "	float4 position : SV_POSITION;\n"
    "	float2 uv : TEXCOORD;\n"
    "};\n"
    "static const float bulletScale = 10;\n" 
    "static const float2 verts[6] = {\n" 
    "{1.0, -1.0}, \n"
    "{-1.0, -1.0},\n" 
    "{-1.0, 1.0}, \n"
    "{-1.0, 1.0}, \n"
    "{1.0, 1.0},  \n"
    "{1.0, -1.0}}; \n"
    "VertexShaderOutput VS_main(\n"
    "   float4 instancePos : INSTANCEPOS,\n"
    "	uint id: SV_VertexID)\n"
    "{\n"
    "	VertexShaderOutput output;\n"
    "   float4 extruding = float4(verts[id], 0.0, 1.0);\n"
    "	output.uv = clamp(extruding.xy, float2(0.0, 0.0), float2(1.0, 1.0));\n"
    "   float4 pos = float4(instancePos.xyz, 1.0);\n"
    "   output.position = mul(MVP, pos);\n"
    "   extruding = float4(bulletScale*extruding.x, bulletScale*extruding.y, output.position.z, output.position.w);\n"
    "   output.position = output.position + extruding;\n"
    "	return output;\n"
    "}\n";
const char fs_shader[] =
    "Texture2D<float4> inputTexture : register(t0);\n"
    "SamplerState     texureSampler : register(s0);\n"
    "float4 PS_main (float4 position : SV_POSITION,\n"
    "				float2 uv : TEXCOORD) : SV_TARGET\n"
    "{\n"
    "	return inputTexture.Sample (texureSampler, uv);\n"
    "}\n";
}
